=> To Do
- Fix issue with internal date when restored on an account
- Add support for compression in the imap communication
- Send a fix for that to the imap guy and add a way to STORE esoteric keywords like the ones in GMAIL
- Optimize storage on metadata file

=> Thinking

- First element synching with a account against the database
=> the database needs an index file for each month directory
=> each email should also have a metadata file that contains => header info and the data file
=> 2 syncing ways => checking info such as labels mainly and syncing only data


Add XOAuth support
=================
run through in python
http://code.google.com/p/google-mail-xoauth-tools/wiki/XoauthDotPyRunThrough
python lib: https://github.com/simplegeo/python-oauth2
Also available in IMAPClient: http://imapclient.freshfoo.com/browser/imapclient/imapclient.py

06.01.12
--------
- Had to change the way email body was stored. Before it was in a json persisting struct.
It is not possible because of encoding issues. Problem with iso-81.. (latin encoding for
german letters).  => Now email body has it own file. 


CLOSED ISSUES:
--------------
CLOSED 1) sync_delete can be redone as all the gm_id are retrieved from the filesystem at once 
(test if it scales) => No need as scan all dirs is very fast (on linux at least)
CLOSED 2) instead of iterating on the remote gmail ids, iterate (with generator) by group of 30 elements on the
disk saved ids. This should scale for ever whatever the number of you have. => Not done but not necessary
CLOSED 3) Test disconnection and see what is going on (error generated) => to be validated with tests if possible
CLOSED 4) potentially add a reconnection mode (try to reconnect 3 times before to quit) => Done for fetch, find_all_mail_folder, 
                                                                                        get_all_folders, get_capabilities,
                                                                                        check_gmailness, search
                                                                                        Check that it applies for all the methods as we
                                                                                        catch only imaplib errors.
CLOSED 7) test why labels cannot be hierarchically recreated => DONE
CLOSED 7.1) Check the Internal Date on a restore: it doesn't seem to be set properly => DONE
CLOSED 7.3) add password save in .gmvault/.passwd => encrypted if possible at least obfuscated => Done
CLOSED 7.6) Optimize fetch (get All but Data and if data already exist update metadata info else get data) => DONE
CLOSED 8) add oauth and a way to save the token. => integration done. Now need testing
CLOSED 8.0.1) need to go in error and --oauth-token and --password are passed together and email is mandatory => DONE
CLOSED 8.1) add a way to add a restore label => Done
CLOSED 8.3) currently decision to decrypt is only taken with the fact that there is a cipher but we should also check that file is .crypt => DONE and encryption added as an option in gmv
CLOSED 8.3.2) Order restore => Done with an orderedDict (Check speed when reading all ids on disk)
CLOSED 8.3.3) Implement a restart for the restore (to not start from scratch when program bugs out) => Done and tested seems to work
CLOSED 9) manage a .gmvault dir in your home => done
CLOSED 8.2) encrypt email data with possibly a pure python method (if not too slow) => Fixed and work on both Mac and Linux
CLOSED 5) add a way to restart from an gmail id. Could be used when you have a very large mailbox => Done descopped because there is a restart mode now
want to restart from the moment when it failed. => not sure it will be useful at the moment
CLOSED 14) Add cache to cache the content of the filesystem in order to query it too much because on Windows it is crap and very very slow => DONE optimized way the files are scanned and add caching
CLOSED 15) Add Incremental retry. I have constated that the retry should pause longer before to restart (add more with a threshold and increase pause time). => DONE and retested the decorator that had a bug
CLOSED 16) Remove the first line DEBUG info in get home_path => Done it was statically called in CredentialHelper
CLOSED 17) Change path in bat script (should be possible with nsis) => Done used NSIS macros
CLOSED 18) - Add script in installer that will set exe in path => better to open a console that set the path (like git does for example http://forums.winamp.com/archive/index.php/t-335716.html) => DONE installer create a shortcut on desktop and a shell is launched with a trick to print a banner (not happy with that as I need a third script but I will overcome it)

ISSUES/FEATURES:
-----------------

FEATURE:
5.1) add support for Chat emails => restore them in a default label. Give the possibility to name it.
ISSUES:
5.2) All_Mail IMAP dir needs to be enabled in gmail => handle this error
6) add logging now otherwise it might be too late => PARTLY DONE (--debug to enable debugging)
6.1) Add logging message in sync => DONE
6.2) Add logging message in restore => DONE
7.2) Implement the restore => being tested still few bugs (it hangs and need to be restarted)
7.4) Improve messages on screen (think on what to print).
8.3.1) Fix SSL disconnection bug => Implemented a reconnect To Be Tested
8.3.4) Handle properly error when oauth token file is invalid (delete it or check that file is not empty)
8.3.5) Implement restart for the sync (full sync restart from where we are instead of scan all emails from beginning)
8.4) work on win support
8.4.1) Clearly indicate that in the full sync mode the --imap-req is ignored if there is one
8.5) test two legged oauth (need an admin password) 
10) add progress bar and better logging outputs with verbose and non verbose mode
11) release v0.5 
12) add cloud saves
13) add Mac Gui, Linux or chrome GUI
14) Rationalise the test suites. In the end we should have a validation suite a gmv_cmd suite that validates the commandline interface. (rest is optional)
Adding Makefile and setup.py
19) Pass arguments to the batch script as at the moment no arguments are passed
20) Try to remove the message.bat file (there might be a way to have a cmd file or create it on the fly without having a physical file. It is messy)
21) Put data and metadata files in a separate dir
22) Add to legged auth for admins
1) make souce tarball
2) make distribution for linux in a directory
3) always have the possiblity to deploy in python/lib with setup.py
4) make egg and make windows version

====== gmail corruption problems ======
There are 2 problems:
- gmail email cannot be Fetched from imap 

Apparently there seem to be some corrupted messages (http://www.google.com/support/forum/p/gmail/thread?tid=1acf74d2c4c1ed46&hl=en)
This is worrying but the message should be flagged and maybe deleted later one.
Let's see. In any case, the exception needs to be catched in 

When Id is retrieved it is working. The problem is there when the data is retrieved

The error is now handled and ids will be flagged

- gmail email can be Fetched from imap but they stay unreadable. They cannot be restored in an email account

======================================================================
ERROR: test_restore_on_gmail (__main__.TestGMVault)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/aubert/workspace/gmvault/src/validation_tests.py", line 81, in test_restore_on_gmail
    syncer.sync_with_gmail_acc('imap.gmail.com', 993, self.gmvault_login, self.gmvault_passwd)
  File "/home/aubert/Dev/projects/gmvault/src/gmvault.py", line 819, in sync_with_gmail_acc
    labels)
  File "/home/aubert/Dev/projects/gmvault/src/gmvault.py", line 302, in push_email
    res = self.server.append(self._all_mail_folder, a_body, a_flags, a_internal_time)
  File "/home/aubert/Dev/projects/gmvault/src/mod_imap.py", line 140, in append
    flags_list, time_val, msg)
  File "/usr/lib/python2.6/imaplib.py", line 317, in append
    return self._simple_command(name, mailbox, flags, date_time)
  File "/usr/lib/python2.6/imaplib.py", line 1060, in _simple_command
    return self._command_complete(name, self._command(name, *args))
  File "/usr/lib/python2.6/imaplib.py", line 895, in _command_complete
    raise self.error('%s command error: %s %s' % (name, typ, data))
error: APPEND command error: BAD ['Invalid Arguments: Unable to parse message']

13H55m29 1254269417797093924
2007-11 => prob

This message has no header and seems to be only a body in base64 => cannot restore it
It should be put in a containement directory and flagged.
Add Message-ID email 

Messages are put in the quarantine dir so that they will not be restored. 

-----------------------------------

===> Work on interface now => gmv (store password, xauthToken)

sync -email a.b@gmail.com --passwd

empty_passwd

if empty password look if there is saved passwd and take it otherwise go for a interactive sequence
if you want to redefine the passwd --passwd --interactive --save-passwd

tentative 1:
1)interactive mode with the password by default:
sync --email b.f@gmail.com --passwd
enter password:

2)possibility to store the password in ~.gmvault/passwds/b.f(at)gmail.com.passwd => encrypted
sync --email b.f@gmail.com --passwd --save-passwd
enter password:

Password has been saved in ~/.gmvault/passwd
3) use password in non interactive mode possible
sync --email b.f@gmail.com --passwd
look in ~.gmvault/passwd for the password

3.1) use password in interactive mode even if password saved and overwrite saved password
sync --email b.f@gmail.com --passwd --interactive --save-passwd
look in ~.gmvault/passwd for the password

4) use token (first time save it and next time use it)
sync --email b.f@gmail.com --oauth-token the_token --save-token 
if token is repassed resave it

Handle Credentials in all levels IMAP, GMVAULIMAP and the rest => Done



Change commandline to support actions
default=argparse.SUPPRESS 

gmv sync guillaume.aubert@gmail.com => full-sync of this account to the default db-dir with xoauth token for this account save or interactively asked
gmv sync [--imap-server] [--imap-port] [--db-dir] [--oauth-token] [--password]
gmv sync 

gmv sync -t full_sync|quick_sync|custom_sync
full_sync:  scan the full gmail mail box and sync everything on disk
quick_sync: sync the last month of email on disk
custom_sync: pass a request to sync only some specific emails => no cleaning applied on db (might add something to prevent syncing with an existing db) 

Work on custom sync (should support also GMAIL extension)

=> Work on the password problem => Save or not password (interactive always but mode to go in cmdline mode).

gmv restore -t full guillaume.aubert@gmail.com => complete restore
gmv restore -t quick guillaume.aubert@gmail.com => restore only the last 3 months
gmv restore -t mirror guillaume.aubert@gmail.com => restore and clean mailbox to be like the database (destructive)

gmv restore -t full --label "Blallh" => resotre and apply an extra label

Another Error uid fetch returns OK but not data:
I have this kind of email uid 142221L
latest_email_uid = 142221
    result, data = mail.uid('fetch', latest_email_uid, '(X-GM-MSGID INTERNALDATE RFC822)')
    raw_email = data[0][1]

flag it as empty and ignore it

#Do fix cmd_tests in order to start validating => boring but very useful

# Restore: currently non destructive restore for the restore mailbox (never delete labels and never delete message).
# the idea was to have an incremental restore that would apply the changes to your mailbox but it isn't a good idea as 
# labels have to be maintained. Could avoid touching an email that is already in the mailbox (I have the email id which is unique)
# but 2 restores will a new label everytime will add several labels to the same email.

str = "Message-Id: <RNTM.AvUE~wq7DP8SE6v9GtQe~yL~Jvsq~zP~hqcRKzr~.0.1323147480.0BHEC8IbGQ!!@rnmdca01.int.rightnowtech.com>
Subject: Magic Online Personal Summary -- December 5, 2011"

header_fields = {{Message-Id: <RNTM.AvUE~wq7DP8SE6v9GtQe~yL~Jvsq~zP~hqcRKzr~.0.1323147480.0BHEC8IbGQ!!@rnmdca01.int.rightnowtech.com>
Subject: Magic Online Personal Summary -- December 5, 2011

}}

Ideal Restore Modes:
- Full: Restore everthing from scratch brute force. 
- Quick: Would not be destructive but at least fix the labels (if one label has been deleted remove it from the email)
- Mirror: Would mirror the mailbox as it is on disk => destructive.

The problem, is that it is will be very slow to mirror or even have the quick mode. It should be
a second batch of features. Let's descope them

Now interesting features:
- A restore can be very long and it could fail, you would need a restart mode (need to track where we are).
- You could have a custom restore that a particular set of months 
- Packaging for windows also is interesting
- An import eml in gmail is also interesting

TBD
Manage when an empty gmvault-db is selected for a restore (Send error and quit)
Handle no last_id.restore file => Done
Copy new Recipe from ActivateState because the current I have doesn't work. => replaced to be tested

Test on reading file system:
----------------------------
Performed some tests and reading 35000 emails takes 6 secs.
If majority of users has more than 80000 emails needs to build an index.

Do a test with 100000 emails (200000 emails) and see how long it takes on linux and win, mac os x => 

Done perfs are ok up to 250 000 emails. 
On Windows it can be up to 30 sec to list 250 000 emails over 50 dirs (Terrible filesystem).

To Do:
DONE: Review how and when errors are catched (Authentication, When uploading or downloading the data, filesystem prbs ...) => seems ok build a test suite to validate it

Problem when restarting after an error: Make a test to reconnect and try

BUG: Subject and MessageId are not parsed properly:
'BODY[HEADER.FIELDS (MESSAGE-ID SUBJECT)]': 'Subject: Vlad\r\nMessage-Id: <954A7199-40EA-447F-A02E-5E08A5E62275@gmail.com>\r\n\r\n'

DONE: Optimize _get_directory_from_id because Win files sytem is a piece of sh.....t and very very slow => DONE (added a cache)
Avoid to do a search whenever we can

# processed 1% 5% 10% 15% 20%
val*0.01
val*0.05
val*0.10
val*0.15
val*0.20

need to enhance the LOG object to have the possibility to report not only directly

Password management:
THIS DONE => Provide a --passwd --store-passwd to encrypt and store the password and --renew-passwd to renew the stored password 
Add a test in the test suite validating the password mode (check the reconnect with the password) 
=>done

encyption key integration (done):
The encryption key is in the .info directory of the gmvault dir. It is generated automatically if it doesn't exist.
If it is lost, it will not be possible to decrypt the message.

TBD 19.03.2012
PARTLY DONE - ADD Manifest for DLLs msvc* and insure that they are accessible from the exe (it is missing. Not sure I need them but to be checked). => need to be added in the DLL PATH
- Think on how it will be used in windows -> bat to do what
- Start documentation
- Pass args to gmvault.bat 
- Test on windows to see perf
- bullet proof restore
- Default db path is incorrect now. it was ./ but it doesn't work on windows. point to $HOME/gmvault-db by default
- change default dir from gmvault.log (in HOME for the moment with time stamp)
- print where in which db the data is going to be stored
- Hit a case where it is not possible to restore emails (gmail throttling, bandwidth restriction ?). We would need to not quarantine the emails as otherwise they will all be quarantine.
- Need an option to deactivate the quarantine


Create Documentation:
pages: 
- Main page describing the product and presenting its advantages
- Quick Start (how to install)
  --- Quick Start Unix
  --- Quick Start Windows
  --- Quick Start Mac
  --- Install from sources with setup.py
- Tutorial
  --- Full Backup
  --- Regular Incremental Backup
  --- Custom Backup
  --- Restoring the account

Fix error when id not return this is due to gmail stopping to accept emails. Would need to not quarantine emails, mark the email as not uploaded (to have the possibility to retry)
and after 5 emails refused stop and tell the user to wait.

=> Handle differently errors (imap.aborterror is recovarable, imap.error is not). Should restart in retry if abort is recoverable otherwise not).

TODO:
Documentation: 
- Quick Start 
	-- Authentication (XOAuth and Password)
	-- Full Backup
	-- Regular Backup
	-- Restoring your account
	-- Advanced features
		--- Custom Backup
        --- Encryption
        --- ?
- FAQS

- How to report a problem
- About

Write Blog page for promotion

ROAD MAP to 1.5-beta
- DONE: Easy way to print exception on screen when problem (otherwise I am blind).
- DONE: Fix folder bug
- Add in documentation a paragraph stipulating that you need to make 'All Mail' visible and the 1000 emails limit
- DONE tested Fix unlocalised problem 
- DONE tested. Add --restart in sync and add restart per account. => Done with imapid to be tested
- Fix python script on pypi
- Done: Fix Windows version (add uninstall, start menu, ...) => no registry tweaking at the moment
- Fix 2-legged oauth
- DONE imap req not working.
- DONE but not sure it is the right approach See this issue and catch the exception and try to reinit the connection. (abort error is not raised it error again after a while=> need to find a way to park the email). Add an option to flag email if option is checked.
- Fix Mac OS X version
- DONE Add no compress option
- DONE Fix imap.abort bug

=======
- fix the label issue when syncing (insure that the label is a string) or ignore it with a warning. When creating the labels,
the get_folder_list is called everytime (memoize it) or call it once at the beginning of the method (not for every label).

Note on bug with labels that are numbers:
-----------------------------------------
IMAPClient responseparser convert all str.isdigit() == True as int so we loose the information. Would need to change that.
=> Would need to redo the tokenParser (see for later).
IMAP_ID =13 (en ai une) is the subject, email sent by turt.


 ROAD MAP to 1.5-final
- Add chat backup
- Improv  reporting at the end of Gmvault (Insure that the reporting is always saved in a file at the end of the run).


Release Note:

Below are the new features and bug fixes implemented in Gmvault 1.5-beta,
- gmvault bash script can now be launched from anywhere (bug fix, issue #a),
- Gmvault now handle localised IMAP Folders (bug fix, issue #),
- Add --restart option in sync mode to restart a backup that failed (Gmail throttle and cut the connection sometimes) from where it failed (feature #)
- Add a restart per account name. If you have multiple accounts, the restart will be saved for all of them
- Windows installer now contains an uninstaller and creates a shortcut folder in the Win Start Menu (feature #). Clean from uninstall menu
- --req-imap -r option now works properly on Mac OSX. Fix gmvault bash script to correctly pass params to python prog (bug fix, issue #)
- Fix issue of failing backup, ending up with imaplib.abort error: SystemError (bug fix issue #)
- Handle labels that are numbers. imaplib returns int type labels when they are number (bug fix issue #)
- print exception on screen when there is a problem in normal mode to give users the possibility to send the error message
- --no-compression option to disable the compression and allow users to use their own compression
- Fix Github Issue 4 (A bug was preventing Gmvault to finish its work when an email was not readable (corrupted ?) from Gmail

Documentation update:
- Add Gmail Setting for Gmvault (make All Mail visible, check 1000 mail limit)


TO DO v1.5-beta:
- add clear message to signal that you've been throttled by Gmail
DONE: - add release note
- add donation button
DONE: - add download page
DONE: - make launch script for mac os x with mac app (see later if it can be launched with app)
DONE: - add make rule for mac 
DONE: - send test version to mac poeple
DONE: - Win uninstaller doesn't remove desktop shortcut and menu shortcut
DONE: - README.txt and RELEASE-NOTE.txt cannot be read properly by Notepad (unix2dos)
DONE: - Make src distrib with setup.py for linux




=======
Note How to build mac os x intel 32 and 64 bits version:
--------------------------------------------------------
You have to install the brew version which 64 bits only for my machine, then you install from the python download page a intel (64 and 32 bits) version.
You can run py2app with --arch=intel that will create a 32/64 bits version (a universal version could be built the same way).

otool -L to check the lib dependencies on a mac
file to see if it is 32/64 bits


check list_folders() to see what is gives and check that in works in any order
Label management:
The way [IMAP]/Trash, [IMAP]/Sent are created looks strange. 
I can create [IMAP]/Trash and [IMAP]/Sent but they are not nested. I would like to know if I need to do an exception for them.

Another Gmail specificity, when you create [IMAP]/Sent only [IMAP] will appear in the list of created folders (using list folders) list: [u'inbox', u'sent', u'sent messages', u'trash', u'[google mail]', u'[google mail]/all mail', u'[google mail]/drafts', u'[google mail]/important', u'[google mail]/sent mail', u'[google mail]/spam', u'[google mail]/starred', u'[google mail]/trash', u'[imap]']

Gmail should fix the issue with the label [IMAP]/Sent, Draft, Trash. They cannot be deleted. Also if you create a/v as label it will be a flat label and later if you create a a/v will become a nested label.
They should fix all these issues.

TO DO V1.6-beta:
- DONE not DONE ?:create list of fixes and added features
- DONE: add support page with flattr and paypal and look for help
- add in doc that you need to enable imap and remove the 1000 emails limit
- DONE: add drop down menu in documentation. 
- Ask ahmed if we could have a floating toc on the left side.
- DONE: fix Mac os x plateform issues 
- fix deployment on Linux plateform. Not done use src for the moment.
- DONE: fix simple quote issue with gmail request 
For single quote it is more complicated than that => Change all examples to double quotes because when single quote spaces are not handled

Documentation update:
- Add Gmail Setting for Gmvault (make All Mail visible, check 1000 mail limit)

TODO Tonight
- Done: Prepare release note if not done
- Done: Change the version name to v1.6-beta
- Done: Merge develop to master
- Done: create Windows version (test oauth, encryption, sync, restore) archive in nodebox
- Done: create Mac version (test oauth, encryption, sync, restore) archive in nodebox
- Done: create src version (test oauth, encryption, sync, restore) archive in nodebox
- Done: create pypi version (test oauth, encryption, sync, restore) archive in nodebox
- Done: create Linux version (test oauth, encryption, sync, restore) archive in nodebox
- Done: Shoutout to the different poeple that helped.
- Follow filenames as defined in the download page.
- Done Merge gh-pages-supp in gh-pages (test it)
- create tag for 1.6-beta and web-1.6-beta
- Tweet for release and support page

- Road map for v1.7 and more:

--- move oauth token somewhere else
--- DONE: Fix infinite loop and thorough testing => Seems ok now I need to insure that it is easy to quarantine a message
--- Add chat support
--- Add local syncing for a particular period and not only for the full sync
--- Add throttling for upload,
--- refactor code to support GUI reporting (async) or logging,
--- Add documentation to configure Gmail and the missing options (encryption, ...),
--- Try to fix the issue with bad emails (strange character maybe improve the quarantine management), 
--- Add a functionality to delete files that are not anymore in Gmail

--- Add GUI
--- Add Chat support
--- Add backup statisitics reporting
--- Add multi-emails backups
--- Add cloud save

