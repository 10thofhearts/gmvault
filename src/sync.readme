=> To Do
- Fix issue with internal date when restored on an account
- Add support for compression in the imap communication
- Send a fix for that to the imap guy and add a way to STORE esoteric keywords like the ones in GMAIL
- Optimize storage on metadata file

=> Thinking

- First element synching with a account against the database
=> the database needs an index file for each month directory
=> each email should also have a metadata file that contains => header info and the data file
=> 2 syncing ways => checking info such as labels mainly and syncing only data


Add XOAuth support
=================
run through in python
http://code.google.com/p/google-mail-xoauth-tools/wiki/XoauthDotPyRunThrough
python lib: https://github.com/simplegeo/python-oauth2
Also available in IMAPClient: http://imapclient.freshfoo.com/browser/imapclient/imapclient.py

06.01.12
--------
- Had to change the way email body was stored. Before it was in a json persisting struct.
It is not possible because of encoding issues. Problem with iso-81.. (latin encoding for
german letters).  => Now email body has it own file. 

To Do 22-12-2012:
-----------------
CLOSED 1) sync_delete can be redone as all the gm_id are retrieved from the filesystem at once 
(test if it scales) => No need as scan all dirs is very fast (on linux at least)
CLOSED 2) instead of iterating on the remote gmail ids, iterate (with generator) by group of 30 elements on the
disk saved ids. This should scale for ever whatever the number of you have. => Not done but not necessary
CLOSED 3) Test disconnection and see what is going on (error generated) => to be validated with tests if possible
CLOSED 7) test why labels cannot be hierarchically recreated => DONE
CLOSED 7.1) Check the Internal Date on a restore: it doesn't seem to be set properly => DONE
CLOSED 7.3) add password save in .gmvault/.passwd => encrypted if possible at least obfuscated => Done
CLOSED 8.0) need to go in error and --oauth-token and --password are passed together and email is mandatory => DONE
CLOSED 9) manage a .gmvault dir in your home => done
4) potentially add a reconnection mode (try to reconect 3 times before to quit) => Done for Fetch 
5) add a way to restart from an imap id. Could be used when you have a very large mailbox and 
want to restart from the moment when it failed. => not sure it will be useful at the moment
5.1) add support for Chat emails => restore them in a default label. Give the possibility to name it.
5.2) All_Mail IMAP dir needs to be enabled in gmail => handle this error
6) add logging now otherwise it might be too late => PARTLY DONE
7.2) Implement the restore => being tested
8) add oauth and a way to save the token. => integration done. Now need testing
8.1) add a way to add a restore label
8.2) encrypt email data with possibly a pure python method (if not too slow) => Fixed and work on both Mac and Linux
8.3) currently decision to decrypt is only taken with the fact that there is a cipher but we should also check that file is .crypt
8.4) work on win support
8.5) test two legged oauth (need an admin password) 
10) add progress bar and better logging outputs with verbose and non verbose mode
11) release v0.5 
12) add cloud saves
13) add Mac Gui, Linux or chrome GUI

Adding Makefile and setup.py
1) make souce tarball
2) make distribution for linux in a directory
3) always have the possiblity to deploy in python/lib with setup.py
4) make egg and make windows version
 

====== gmail corruption problems ======
There are 2 problems:
- gmail email cannot be Fetched from imap 

Apparently there seem to be some corrupted messages (http://www.google.com/support/forum/p/gmail/thread?tid=1acf74d2c4c1ed46&hl=en)
This is worrying but the message should be flagged and maybe deleted later one.
Let's see. In any case, the exception needs to be catched in 

When Id is retrieved it is working. The problem is there when the data is retrieved

The error is now handled and ids will be flagged

- gmail email can be Fetched from imap but they stay unreadable. They cannot be restored in an email account

======================================================================
ERROR: test_restore_on_gmail (__main__.TestGMVault)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/aubert/workspace/gmvault/src/validation_tests.py", line 81, in test_restore_on_gmail
    syncer.sync_with_gmail_acc('imap.gmail.com', 993, self.gmvault_login, self.gmvault_passwd)
  File "/home/aubert/Dev/projects/gmvault/src/gmvault.py", line 819, in sync_with_gmail_acc
    labels)
  File "/home/aubert/Dev/projects/gmvault/src/gmvault.py", line 302, in push_email
    res = self.server.append(self._all_mail_folder, a_body, a_flags, a_internal_time)
  File "/home/aubert/Dev/projects/gmvault/src/mod_imap.py", line 140, in append
    flags_list, time_val, msg)
  File "/usr/lib/python2.6/imaplib.py", line 317, in append
    return self._simple_command(name, mailbox, flags, date_time)
  File "/usr/lib/python2.6/imaplib.py", line 1060, in _simple_command
    return self._command_complete(name, self._command(name, *args))
  File "/usr/lib/python2.6/imaplib.py", line 895, in _command_complete
    raise self.error('%s command error: %s %s' % (name, typ, data))
error: APPEND command error: BAD ['Invalid Arguments: Unable to parse message']

13H55m29 1254269417797093924
2007-11 => prob

This message has no header and seems to be only a body in base64 => cannot restore it
It should be put in a containement directory and flagged.
Add Message-ID email 

Messages are put in the quarantine dir so that they will not be restored. 

-----------------------------------

===> Work on interface now => gmv (store password, xauthToken)

sync -email a.b@gmail.com --passwd

empty_passwd

if empty password look if there is saved passwd and take it otherwise go for a interactive sequence
if you want to redefine the passwd --passwd --interactive --save-passwd

tentative 1:
1)interactive mode with the password by default:
sync --email b.f@gmail.com --passwd
enter password:

2)possibility to store the password in ~.gmvault/passwds/b.f(at)gmail.com.passwd => encrypted
sync --email b.f@gmail.com --passwd --save-passwd
enter password:

Password has been saved in ~/.gmvault/passwd
3) use password in non interactive mode possible
sync --email b.f@gmail.com --passwd
look in ~.gmvault/passwd for the password

3.1) use password in interactive mode even if password saved and overwrite saved password
sync --email b.f@gmail.com --passwd --interactive --save-passwd
look in ~.gmvault/passwd for the password

4) use token (first time save it and next time use it)
sync --email b.f@gmail.com --oauth-token the_token --save-token 
if token is repassed resave it

Handle Credentials in all levels IMAP, GMVAULIMAP and the rest


